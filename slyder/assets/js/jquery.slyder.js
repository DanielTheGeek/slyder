(function( $, window ) {
	var globals = {
		'timeoutID': 		null, 
		'timeoutCanceled': 	false
	};

	var methods = {
		init : function( options ) {
			var defaults = {
				'slydeClass': 			'slyde',
				'activeSlydeClass': 	'slyde-active',
				'leftArrowSelector': 	'.slyde-left',
				'rightArrowSelector': 	'.slyde-right',
				'slydeWrapperSelector': '.slyde-wrapper',
				'useArrowKeys': 		'true', 
				'animationType': 		'fade', //Supports only fade for now
				'animationSpeed': 		'fast',
				'onAnimationComplete': 	$.noop,
				'autoStart': 			'true',
				'slydeTimeout': 		5000, 
				'dataSlyde': 			'slyde',
				'pauseOnHover': 		'true', 
				'autoGenerate': 		'false',
				'autoGenerateData':     {} 
			};

			options = $.extend( defaults, options );

			// Bind arrow keys navigation
			if ( options.useArrowKeys ) {
				$(document).on( 'keydown.slyder', function( event ) {
					if ( event.keyCode === 37 ) {
						event.preventDefault();

						methods.prevSlyde.call( this, options );
					} else if ( event.keyCode === 39 ) {
						event.preventDefault();

						methods.nextSlyde.call( this, options );
					}
				});
			}

			return this.each(function() {
				var $this = $(this),
				data = $this.data( 'slyder' );

				if ( !data ) {
					$this.data( 'slyder', {
						target: $this
					});

					// Bind arrow buttons navigation
					$this.find( options.leftArrowSelector ).on( 'click.slyder', function( event ) {
						event.preventDefault();

						methods.prevSlyde.call( this, options );
					});

					$this.find( options.rightArrowSelector ).on( 'click.slyder', function( event ) {
						event.preventDefault();

						methods.nextSlyde.call( this, options );
					});

					// Automatically start if set to true in options
					if ( options.autoStart ) {
						//TODO: Pause slider on hover if enabled in options
						methods.moveTo.call( this, options, 0 );
						globals.timeoutID = window.setTimeout(function() {
							methods.doLoop.call( this, options );
						}, options.slydeTimeout );
					} else {
						globals.timeoutCanceled = true;
					}
				}
			});
		},

		destroy : function() {
			$(window).off( '.slyder' );

			return this.each(function(){
				var $this = $(this),
				data = $this.data( 'slyder' );
				$this.removeData( 'slyder' );
			});
		},

		// Method to show slide
		showSlyde: function( options, index ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentSlyde = slydes.siblings( '.' + options.activeSlydeClass ),
			currentIndex = currentSlyde.index(),
			$this = $( options.slydeWrapperSelector ).find( '.' + options.slydeClass + ':eq(' + index + ')' );

			var itemDefaults = {
				'animationType': 	options.animationType,
				'animationSpeed': 	options.animationSpeed
			};

			// Extend default item options using data-* attribute
			var itemOptions = $.extend(itemDefaults, $this.data( options.dataSlyde ));

			switch ( itemOptions.animationType ) {
				case 'fade':
				default:
					// Hide previous slide
					currentSlyde.fadeOut( itemOptions.animationSpeed, function() {
						$(this).removeClass( options.activeSlydeClass );
					});

					// Fire animation
					$this.fadeIn( itemOptions.animationSpeed, function() {
						$(this).addClass( options.activeSlydeClass );

						// Trigger callback - onAnimationComplete
						if ( $.isFunction(options.onAnimationComplete) ) {
							options.onAnimationComplete.call( this, options, itemOptions, index );
						}

						// Show arrows if navigation is enabled in options
						methods.toggleArrows.call( this, options );

						// Continue sliding if set in options
						if ( ! globals.timeoutCanceled ) {
							globals.timeoutID = window.setTimeout(function() {
								methods.doLoop.call( this, options );
							}, options.slydeTimeout);
						}			
					});
				break;
			}
		},

		// Show arrows if navigation is enabled in options
		toggleArrows: function ( options ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.activeSlydeClass ).index();
			if ( slydes.length > 1 ) {
				if ( currentIndex >= 0 ) {
					// Boom! show arrows
					$( options.slydeWrapperSelector ).siblings( options.leftArrowSelector + ', ' + options.rightArrowSelector ).show();

					// Hide right arrow if it's the last slide
					if ( currentIndex == (slydes.length - 1 ) ) {
						$( options.slydeWrapperSelector ).siblings( options.rightArrowSelector ).hide();
					}

					// Hide left arrow if it's the first slide
					if ( currentIndex === 0 ) {
						$( options.slydeWrapperSelector ).siblings( options.leftArrowSelector ).hide();
					}	
				}
			}
		},

		//TODO: Method to navigate to a slide
		moveTo: function( options, index ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.activeSlydeClass ).index();
			if ( index != currentIndex ) {
				methods.showSlyde.call( this, options, index );
			}
		},

		//TODO: Method to navigate to previous slide
		prevSlyde: function( options ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.activeSlydeClass ).index();

			if ( slydes.length > 0 ) {
				var newIndex = ( currentIndex -1 );

				// If this is the first slide, do nada
				if ( newIndex < 0 ) {
					return false;
				}

				methods.moveTo.call( this, options, newIndex );

				// Cancel slideshow timeout if navigation was fired
				methods.cancelTimeout.call( this, options );

				methods.moveTo.call( this, options, newIndex );
			}
		},

		//TODO: Method to navigate to next slide
		nextSlyde: function( options ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.activeSlydeClass ).index();

			if ( slydes.length > 0 ) {
				var newIndex =( currentIndex + 1 );

				// If this is the last slide, do nada
				if ( newIndex > (slydes.length -1) ) {
					return false;
				}

				methods.moveTo.call( this, options, newIndex );

				// Cancel slideshow timeout if navigation was fired
				methods.cancelTimeout.call( this, options );

				methods.moveTo.call( this, options, newIndex );
			}
		},

		// Auto play method
		doLoop: function( options ) {
			var slydes = $(options.slydeWrapperSelector).find( '.' + options.slydeClass ),
			currentIndex = slydes.siblings( '.' + options.activeSlydeClass ).index();

			// No need to loop if there's only one slide
			if ( slydes.length > 1 ) {
				var newIndex = ( currentIndex + 1 );

				// If this is the last slide, go back to the first
				if ( newIndex > (slydes.length - 1) ) {
					newIndex = 0;
				}

				methods.moveTo.call( this, options, newIndex );
			}
		},

		// Remove the slideshow timeout
		cancelTimeout: function( options ) {
			if ( globals.timeoutID ) {
				window.clearTimeout( globals.timeoutID );
			}

			globals.timeoutCanceled = true;
		},

		//TODO: Method to automatically generate slider from received data
		autoGenerateSlyde: function( options ) {

		}
	};

	$.fn.slyder = function( method ) {
		if ( methods[method] ) {
			return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ) );
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' + method + ' does not exist on jQuery.slyder' );
		}
	};
})( jQuery, window);